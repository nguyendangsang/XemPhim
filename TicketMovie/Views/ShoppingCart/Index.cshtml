@model ShoppingCart

<h2>Giỏ hàng</h2>

<form id="updateCartForm" asp-action="UpdateCart" method="post">
    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Image</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Items)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>
                        <img src="@item.ImageUrl" style="width: 180px; height: 200px;" />
                    </td>
                    <td>
                        <input type="number" name="quantity" value="@item.Quantity" min="1" max="100" />
                        <input type="hidden" name="productId" value="@item.ProductId" />
                    </td>
                    <td>@item.Price</td>
                    <td class="itemTotal">@(item.Price * item.Quantity)</td>
                    <td>
                        <button type="button" class="updateBtn">Update</button>
                        <button type="button" class="removeBtn" data-product-id="@item.ProductId">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</form>
@*
Nút thanh toán *@
<form class="d-flex">
    <button class="btn btn-outline-dark" type="submit" asp-area="" asp-controller="ShoppingCart" asp-action="checkout">
        Check Out
    </button>
</form>


@*
Nút back *@
<div>
    <a class="btn btn-secondary mt-2" asp-area="" asp-controller="Home" asp-action="Index">Back</a>
</div>


<div id="totalPrice" class="total-price">Total: $0.00</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>


<script>
    // Hàm để cập nhật tổng tiền khi số lượng sản phẩm thay đổi
    function updateTotal() {
        let total = 0;
        document.querySelectorAll('.itemTotal').forEach(function (item) {
            total += parseFloat(item.textContent);
        });
        document.getElementById('totalPrice').textContent = 'Tổng: ' + total.toFixed(0)+' VND';
    }

    // Lặp qua tất cả các nút "update" và thêm sự kiện cho mỗi nút
    document.querySelectorAll('.updateBtn').forEach(button => {
        button.addEventListener('click', function () {
            Swal.fire({
                title: 'Update Cart?',
                text: 'Bạn có muốn cập nhật giỏ hàng?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, update it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    document.getElementById('updateCartForm').submit();
                }
            });
        });
    });


    // Lặp qua tất cả các nút "remove" và thêm sự kiện cho mỗi nút
    document.querySelectorAll('.removeBtn').forEach(button => {
        button.addEventListener('click', function () {
            const productId = button.getAttribute('data-product-id');
            // Hiển thị cảnh báo xác nhận khi nhấn nút "remove"
            Swal.fire({
                title: 'Remove Item?',
                text: 'Bạn có muốn xóa sản phẩm khỏi giỏ hàng không',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, remove it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    const form = document.createElement('form');
                    form.method = 'post';
                    form.action = '/ShoppingCart/RemoveFromCart';
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'productId';
                    input.value = productId;
                    form.appendChild(input);
                    document.body.appendChild(form);
                    form.submit();
                }
            });
        });
    });

    updateTotal(); // Cập nhật tổng tiền khi trang được tải lần đầu
       // Update total on quantity change
        document.querySelectorAll('input[name="quantity"]').forEach(input => {
            input.addEventListener('change', updateTotal);
        });

    // Lặp qua tất cả các ô input số lượng và thêm sự kiện kiểm tra khi số lượng thay đổi
    document.querySelectorAll('input[name="quantity"]').forEach(input => {
        input.addEventListener('change', function () {
            let value = parseInt(this.value);
            // Kiểm tra số lượng hợp lệ (từ 1 đến 100)
            if (isNaN(value) || value < 1 || value > 100) {
                // Nếu số lượng không hợp lệ, hiển thị cảnh báo và thiết lập lại giá trị về 1
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Quantity',
                    text: 'Số lượng phải từ 1 - 100',
                }).then(() => {
                    this.value = 1; // Thiết lập lại giá trị về 1
                    updateTotal(); // Cập nhật tổng tiền
                });
            } else {
                updateTotal(); // Cập nhật tổng tiền
            }
        });
    });
</script>



